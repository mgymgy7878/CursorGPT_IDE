{
  "name": "spark-monorepo",
  "version": "0.3.3",
  "description": "AI-Powered Trading Supervisor with Turkish Language Support",
  "private": true,
  "type": "module",
  "engines": {
    "node": ">=18.18.0 <21",
    "pnpm": ">=10.14.0"
  },
  "volta": {
    "node": "20.10.0"
  },
  "workspaces": [
    "apps/*",
    "packages/*",
    "services/*",
    "tools/**"
  ],
  "packageManager": "pnpm@10.14.0",
  "pnpm": {
    "overrides": {
      "fastify": "4.29.1",
      "@fastify/rate-limit": "8.1.1",
      "@fastify/websocket": "8.3.1"
    }
  },
  "scripts": {
    "build": "tsc -b tsconfig.references.core.json",
    "build:clean": "pnpm run clean && pnpm run build",
    "build:types": "tsc -b tsconfig.packages.json",
    "clean:types": "tsc -b tsconfig.packages.json --clean",
    "tsc:clean:core": "node -e \"const fs=require('fs');const p=require('path');(function rm(d){if(fs.existsSync(d))for(const f of fs.readdirSync(d,{withFileTypes:true})){const fp=p.join(d,f.name);if(f.isDirectory())rm(fp);else if(f.name.endsWith('.tsbuildinfo'))fs.rmSync(fp)}})('.')\"",
    "tsc:clean:all": "tsc -b --clean tsconfig.references.json",
    "build:core": "tsc -b tsconfig.references.core.json",
    "rebuild:core": "pnpm run tsc:clean:core && pnpm run build:types && tsc -b tsconfig.references.core.json",
    "rebuild:all": "pnpm run tsc:clean:all && pnpm run build:types && tsc -b tsconfig.references.json",
    "ts:diag:core": "powershell -ExecutionPolicy Bypass -File scripts/ts-diagnose.ps1",
    "dev:verify:win": "cmd /c scripts\\dev-verify.cmd",
    "dev:one": "wscript.exe //nologo scripts\\one-shot.vbs",
    "typecheck:workspaces": "pnpm -r --workspace-concurrency=1 exec tsc -p tsconfig.json --noEmit",
    "typecheck:web": "pnpm -F web-next exec tsc -p tsconfig.json --noEmit",
    "typecheck:executor": "pnpm -F executor exec tsc -p tsconfig.json --noEmit",
    "typecheck": "tsc -p tsconfig.references.json --noEmit",
    "typecheck:all": "pnpm -r --workspace-concurrency=1 run typecheck || true",
    "typecheck:clean": "tsc -b --clean",
    "typecheck:core": "pnpm run build:types && tsc -b tsconfig.references.core.json --pretty false",
    "lint": "pnpm -w eslint .",
    "lint:fix": "pnpm -w eslint . --fix",
    "dev:web": "pnpm -w -F @spark/web-next dev",
    "dev:api": "pnpm -w -F @spark/executor dev",
    "dev:up": "powershell -NoProfile -ExecutionPolicy Bypass -File tools/dev-up.ps1",
    "dev:down": "powershell -NoProfile -ExecutionPolicy Bypass -File tools/dev-down.ps1",
    "dev:verify": "node tools/smoke.cjs --all --retries 40 --sleep 2000",
    "deps:dedupe": "pnpm -w dedupe",
    "deps:why": "pnpm -w why",
    "logs:web": "powershell -NoProfile -Command \"Get-Content -Wait -Tail 50 logs\\web-next.txt\"",
    "logs:api": "powershell -NoProfile -Command \"Get-Content -Wait -Tail 50 logs\\executor.txt\"",
    "guard:deep-imports": "node scripts/guard/deep-import-guard.mjs",
    "smoke:subpath": "pnpm -w run build:types && node tools/smoke-subpath.mjs",
    "smoke:runtime": "pnpm -w run build:types && node tools/smoke-runtime.mjs",
    "smoke:ui": "node tools/smoke.cjs ui",
    "smoke:api": "node tools/smoke.cjs api",
    "smoke": "node tools/smoke.cjs --all",
    "barrels": "node tools/make-barrels.mjs",
    "dep:audit": "pnpm dlx depcheck --json > evidence/audit/depcheck.json 2>&1 || exit 0",
    "dep:unused": "pnpm dlx ts-prune --ignore \"node_modules|dist|.next|evidence\" > evidence/audit/ts_prune.txt 2>&1 || exit 0",
    "dep:circular": "pnpm dlx madge --circular --extensions ts,tsx,js apps services packages > evidence/audit/madge_circular.txt 2>&1 || exit 0",
    "check:fast": "pnpm -w typecheck:core && pnpm -w lint",
    "check:deep": "pnpm -w check:fast && pnpm -w dep:audit && pnpm -w dep:unused && pnpm -w dep:circular",
    "doctor": "node tools/doctor.cjs",
    "fix:imports": "node tools/fix-import-specifiers.mjs",
    "install:all": "pnpm -w install",
    "clean:web": "powershell -NoProfile -Command \"if (Test-Path apps/web-next/.next) { Remove-Item -Recurse -Force apps/web-next/.next }\"",
    "clean:api": "powershell -NoProfile -Command \"if (Test-Path services/executor/dist) { Remove-Item -Recurse -Force services/executor/dist }\"",
    "clean": "pnpm run clean:web && pnpm run clean:api",
    "backup": "powershell -NoProfile -ExecutionPolicy Bypass -File tools/backup-config.ps1",
    "guard:cursor": "node -e \"process.exit(0)\"",
    "guard:ts-types": "node -e \"const fs=require('fs'),p=require('path');let bad=[];(function w(d){for(const f of fs.readdirSync(d)){const x=p.join(d,f),s=fs.statSync(x);if(s.isDirectory()){if(f==='node_modules')continue;w(x);}else if(/^tsconfig.*\\.json$/i.test(f)){try{const j=JSON.parse(fs.readFileSync(x,'utf8'));if(j.compilerOptions&&Array.isArray(j.compilerOptions.types)&&j.compilerOptions.types.includes('@spark'))bad.push(x);}catch(e){console.warn('JSON parse error in',x);}}}})('.'); if(bad.length){console.error('Forbidden @spark types in:',bad);process.exit(1);} else {console.log('OK: no @spark types');}\"",
    "guard:postcss": "node -e \"const fs=require('fs'),p=require('path');const names=['postcss.config.js','postcss.config.cjs','postcss.config.mjs','tailwind.config.js','tailwind.config.cjs','tailwind.config.mjs'];const found=[];for(const name of names){const path=p.join('apps/web-next',name);if(fs.existsSync(path))found.push(path);}if(found.length===2){console.log('OK: PostCSS/Tailwind config bulundu â†’',found);}else{console.error('PostCSS/Tailwind config eksik veya fazla:',found);process.exit(1);}\"",
    "guard:aliases": "node -e \"const fs=require('fs'); const tsconfig = JSON.parse(fs.readFileSync('apps/web-next/tsconfig.json', 'utf8')); if(!tsconfig.compilerOptions?.paths?.['@/*']) { console.error('@ alias not found in web-next tsconfig'); process.exit(1); } console.log('OK: @ alias configured');\"",
    "ci:exchange": "echo 'Exchange tests skipped - jest not available'",
    "ci:verify": "pnpm guard:postcss && pnpm guard:ts-types && pnpm guard:aliases && pnpm smoke && pnpm ci:exchange",
    "predev": "pnpm run build:types",
    "prebuild": "pnpm guard:ts-types && pnpm guard:postcss && pnpm guard:aliases",
    "prepare": "husky"
  },
  "keywords": [
    "trading",
    "ai",
    "supervisor",
    "turkish",
    "binance",
    "strategy"
  ],
  "author": "AI Trading Team",
  "license": "MIT",
  "dependencies": {
    "@fastify/type-provider-typebox": "^5.2.0",
    "@monaco-editor/react": "^4.7.0",
    "@prisma/client": "^5.22.0",
    "@sinclair/typebox": "^0.34.41",
    "axios": "^1.11.0",
    "fast-json-stringify": "^6.0.1",
    "fastify": "^4.29.1",
    "fastify-plugin": "^4.5.1",
    "mitt": "^3.0.1",
    "next": "14.2.32",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "openpgp": "^5.4.0",
    "recharts": "^2.15.4",
    "ssh2": "^1.15.0",
    "undici": "^7.14.0",
    "ws": "^8.18.3",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@types/node": "^18.19.122",
    "@typescript-eslint/eslint-plugin": "6.21.0",
    "@typescript-eslint/parser": "6.21.0",
    "concurrently": "8.2.2",
    "cross-env": "7.0.3",
    "eslint": "8.57.0",
    "eslint-config-next": "14.2.5",
    "fast-glob": "^3.3.3",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.6",
    "prisma": "^5.22.0",
    "rimraf": "^5.0.7",
    "tsup": "^8.5.0",
    "tsx": "^4.16.0",
    "typescript": "^5.9.2"
  },
  "lint-staged": {
    "*.{ts,tsx,js,cjs,mjs,json}": [
      "pnpm -w eslint --fix",
      "pnpm -w tsc -p tsconfig.json --noEmit --pretty false"
    ]
  }
}
