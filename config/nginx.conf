# Spark TA Module - Nginx Configuration
# Save to: /etc/nginx/sites-available/spark-ta
# Enable: sudo ln -s /etc/nginx/sites-available/spark-ta /etc/nginx/sites-enabled/
# Test: sudo nginx -t
# Reload: sudo systemctl reload nginx

upstream executor_backend {
    least_conn;
    server localhost:4001 weight=1 max_fails=3 fail_timeout=30s;
    server localhost:4002 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 64;
}

upstream web_backend {
    server localhost:3000 weight=1 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=60r/m;
limit_req_zone $binary_remote_addr zone=stream_limit:10m rate=3r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

server {
    listen 80;
    listen [::]:80;
    server_name spark.example.com;

    # Redirect HTTP to HTTPS (production)
    # return 301 https://$server_name$request_uri;

    # Access logs
    access_log /var/log/nginx/spark-access.log;
    error_log /var/log/nginx/spark-error.log warn;

    # Max request size
    client_max_body_size 5M;

    # Timeouts
    proxy_connect_timeout 10s;
    proxy_send_timeout 30s;
    proxy_read_timeout 60s;

    # SSE-specific location (critical for real-time streaming)
    location /api/marketdata/stream {
        # Rate limiting
        limit_req zone=stream_limit burst=5 nodelay;
        limit_conn conn_limit 3;

        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        
        # SSE requires Connection: close (not keep-alive)
        proxy_set_header Connection '';
        
        # Disable buffering (critical for SSE)
        proxy_buffering off;
        proxy_cache off;
        chunked_transfer_encoding off;
        
        # Long timeout for persistent connection
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        
        # Disable nginx's buffering
        add_header X-Accel-Buffering no;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS (if needed)
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    }

    # API routes (with rate limiting)
    location /api/ {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Enable caching for candles endpoint
        proxy_cache_valid 200 15s;
        proxy_cache_key "$scheme$request_method$host$request_uri";
    }

    # Executor direct access (optional, for internal tools)
    location /executor/ {
        # Restrict to internal IPs only
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://executor_backend/;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Connection "";
    }

    # Metrics endpoint (internal only)
    location /metrics {
        # Restrict to monitoring servers
        allow 10.0.1.10;  # Prometheus server
        allow 127.0.0.1;  # Localhost
        deny all;
        
        proxy_pass http://executor_backend/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Health check endpoint (for load balancers)
    location /health {
        proxy_pass http://executor_backend/health;
        proxy_http_version 1.1;
        access_log off;
    }

    # Static files and Next.js routes
    location / {
        proxy_pass http://web_backend;
        proxy_http_version 1.1;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://web_backend;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss://stream.binance.com https://api.binance.com;" always;
    
    # Hide server version
    server_tokens off;
}

# HTTPS configuration (production)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name spark.example.com;
#
#     # SSL certificates
#     ssl_certificate /etc/letsencrypt/live/spark.example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/spark.example.com/privkey.pem;
#     ssl_trusted_certificate /etc/letsencrypt/live/spark.example.com/chain.pem;
#
#     # SSL settings
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#
#     # ... rest of configuration same as HTTP server block
# }

